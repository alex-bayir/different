#!/bin/bash
log=log.txt; help="
Usage:
sudo bash this.sh -h <host> -p <port>
sudo bash this.sh -s
sudo bash this.sh -h <host> -p <port> -s

Options:
  -h, --host     <host>  SIEM hostname
  -p, --port     <port>  SIEM port
  -s, --save             audit log file (/var/log/audit/audit.log)
  -l, --log      <file>  logging of changes to a file
                           (this script) (by default: $log)

 --help         display this help and exit"

while [ "$#" -gt 0 ]; do
    case $1 in
        -h|--host) host=$2; shift;;
        -p|--port) port=$2; shift;;
        -s|--save) journal=/var/log/audit/audit.log; shift;;
        -l|--log)  log=$2; shift;;
        --help) echo -e "$help"; exit 0;;
        *) echo "Unknown parameter passed: $1"; echo -e "$help"; exit 1 ;;
    esac
    shift
done

[ "$(whoami)" != root ] && { echo "ERROR: There are not enough privileges to execute."; exit 1; }
which service auditd auditctl rsyslogd tee base64 diff sed cat echo 1>/dev/null || { echo -e "ERROR: Some of the required packages are missing."; exit 1; }
([ $host ] && [ $port ]) || ([ ! $host ] && [ ! $port ] && [ $journal ]) || { echo "ERROR: Not correct params: need specify --host and --port or/and use --save"; }

# get os,auditd info
echo ">cat /etc/*release* /etc/*version* 2>/dev/null:" > $log
cat /etc/*release* /etc/*version* 2>/dev/null >> $log
echo ">auditctl -v && auditctl -s:" >> $log
auditctl -v >> $log && auditctl -s >> $log

# backup auditd rules
if [ ! -s audit.rules.bak ] && [ $(auditctl -l > audit.rules.bak) ]; then 
    echo "INFO: Current rules saved to audit.rules.bak";
fi

rules=""
echo $rules | base64 -d > /etc/audit/rules.d/audit.rules && chmod 600 /etc/audit/rules.d/audit.rules

echo ">auditctl -s:" >> $log
auditctl -s >> $log
echo ">auditctl -l | wc -l:" >> $log
auditctl -l | wc -l >> $log

if [ `auditctl -l | wc -l` -le 300 ]; then
    echo "ERROR: The rules didn't apply" |& tee -a $log >&2; exit 1;
fi

# check major version auditd
if [ `auditctl -v | sed -r "s/[^0-9]*([0-9]+)\..+/\1/g"` -ge 3 ]; then 
    audit=/etc/audit/auditd.conf
    plugins=/etc/audit/plugins.d/syslog.conf
    conf="active = yes\ndirection = out\npath = /sbin/audisp-syslog\ntype = always\nargs = LOG_INFO LOG_LOCAL6\nformat = string"
else
    audit=/etc/audisp/audispd.conf
    plugins=/etc/audisp/plugins.d/syslog.conf
    conf="active = yes\ndirection = out\npath = builtin_syslog\ntype = builtin\nargs = LOG_INFO LOG_LOCAL6"
fi

# edit plugins config
if [ ! -f $plugins.bak ]; then
    cat $plugins>$plugins.bak 2>/dev/null; echo "INFO: The current configuration of $plugins is saved in $plugins.bak"
fi
echo -e $conf > $plugins
echo $plugins: |& tee -a $log && diff $plugins $plugins.bak |& tee -a $log

# edit audit config
if [ ! -f $audit.bak ]; then
    cat $audit>$audit.bak 2>/dev/null; echo "INFO: The current configuration of $audit is saved in $audit.bak"
fi
sed -ri "s/^\s*name_format\s*=\s*.+/name_format = HOSTNAME/g" $audit
sed -ri "s/^\s*space_left\s*=\s*.+/space_left = 99/g" $audit
sed -ri "s/^\s*space_left_action\s*=\s*.+/space_left_action = syslog/g" $audit
sed -ri "s/^\s*admin_space_left\s*=\s*.+/admin_space_left = 90/g" $audit
sed -ri "s/^\s*admin_space_left_action\s*=\s*[Ee][Mm][Aa][Ii][Ll]/admin_space_left_action = syslog/g" $audit
echo $audit: |& tee -a $log && diff $audit $audit.bak |& tee -a $log

# edit rsyslog config
if [ ! -d /etc/rsyslog.d ]; then mkdir /etc/rsyslog.d; echo "WARNING: /etc/rsyslog.d wasn``t exist and was created">>$log; fi
echo -e "$([ $host ] && [ $port ] && echo "local6.=info @@$host:$port\n")$([ $journal ] && echo "local6.=info $journal\n")" > /etc/rsyslog.d/siem.conf || { echo "ERROR: Cannot create /etc/rsyslog.d/siem.conf" |& tee -a $log; exit 1; }

# Restart daemons
[ `which systemctl` ] && systemctl restart auditd  |& tee -a $log || [ `which service` ] && { service auditd  stop |& tee -a $log && service auditd  start |& tee -a $log; } || { kill -HUP $(ps -C auditd   -o pid=) && grep auditd   /var/log/syslog | tail -n 10 |& tee -a $log; }
[ `which systemctl` ] && systemctl restart rsyslog |& tee -a $log || [ `which service` ] && { service rsyslog stop |& tee -a $log && service rsyslog start |& tee -a $log; } || { kill -HUP $(ps -C rsyslogd -o pid=) && grep rsyslogd /var/log/syslog | tail -n 10 |& tee -a $log; }

sleep 10s

# Statuses
[ `which systemctl` ] && systemctl status auditd  |& tee -a $log || service auditd  status |& tee -a $log
[ `which systemctl` ] && systemctl status rsyslog |& tee -a $log || service rsyslog status |& tee -a $log


[ $host ] && [ $port ] && {
    echo "INFO: Checking communication with SIEM: An attempt to send a test message along with a log of changes"
    timeout 5 bash -c 'echo "<1>$(LANG=us_US date +"%B %d %Y %T") $(hostname) audispd[000000]: node=$(hostname) type=CONFIG_CHANGE msg=setting auditd finished $(hostname) [$(hostname -i)]:\n$(sed -zre ''s/\\n/\\\\n/g'' -zre ''s/\"/\'\''/g'' '$log')" > /dev/tcp/'$host'/'$port' ' && echo "INFO: $host:$port avaible" || echo "INFO: $host:$port unavaible"
}
#echo "<1>$(LANG=us_US date +"%B %d %Y %T") $(hostname) audispd[000000]: node=$(hostname) type=CONFIG_CHANGE msg=setting auditd finished $(hostname) [$(hostname -i)]:\n$(sed -zr 's/\n/\\n/g' $log)" > /dev/tcp/$host/$port
